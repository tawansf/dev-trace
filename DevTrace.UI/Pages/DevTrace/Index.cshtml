@page
@model DevTrace.UI.Pages.DevTrace.IndexModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>DevTrace Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
</head>
<body class="bg-gray-100 text-sm p-6">
<h1 class="text-2xl font-bold mb-4">ðŸ“Š DevTrace Dashboard</h1>
<canvas id="requestsChart" width="400" height="200"></canvas>
<table class="min-w-full bg-white rounded shadow">
    <thead>
    <tr class="bg-gray-200 text-left">
        <th class="p-2">Time</th>
        <th class="p-2">Method</th>
        <th class="p-2">Path</th>
        <th class="p-2">Status</th>
        <th class="p-2">Elapsed (ms)</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var log in Model.Logs)
    {
        <tr class="border-t">
            <td class="p-2">@log.Timestamp.ToLocalTime().ToString("HH:mm:ss")</td>
            <td class="p-2 font-mono">@log.Method</td>
            <td class="p-2 font-mono">@log.Path</td>
            <td class="p-2">@log.StatusCode</td>
            <td class="p-2">@log.ElapsedMilliseconds</td>
        </tr>
    }
    </tbody>
</table>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('requestsChart').getContext('2d');

    const chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'RequisiÃ§Ãµes por segundo',
                data: [],
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.3
            }]
        },
        options: {
            animation: false,
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Tempo'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Quantidade'
                    },
                    beginAtZero: true
                }
            }
        }
    });

    async function fetchData() {
        const res = await fetch('/devtrace/logs');
        const logs = await res.json();

        const grouped = {};
        logs.forEach(log => {
            const second = new Date(log.timestamp).toISOString().substring(14, 19);
            grouped[second] = (grouped[second] || 0) + 1;
        });

        chart.data.labels = Object.keys(grouped).slice(-10);
        chart.data.datasets[0].data = Object.values(grouped).slice(-10);
        chart.update();
    }

    setInterval(fetchData, 2000);
</script>

</body>
</html>